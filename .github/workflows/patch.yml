name: Apply patch from issue comment
on:
  issue_comment:
    types: [created]
permissions:
  contents: write
  issues: write
jobs:
  patch:
    if: contains(github.event.comment.body, '/patch ')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { ref: main }
      - name: Parse patch command
        id: parse
        run: |
          BODY=$(cat <<'EOF'
${{ github.event.comment.body }}
EOF
)
          # expects one-line header like:
          # /patch path=assets/js/main.js search="old" replace="new"
          LINE=$(echo "$BODY" | sed -n 's|^/patch ||p' | head -n1)
          echo "$LINE" > /tmp/cmd.txt
          # extract key=values (very simple parser)
          PATHV=$(sed -n 's/.*path=\([^ ]*\).*/\1/p' /tmp/cmd.txt)
          SEARCH=$(sed -n 's/.*search="\([^"]*\)".*/\1/p' /tmp/cmd.txt)
          REPLACE=$(sed -n 's/.*replace="\([^"]*\)".*/\1/p' /tmp/cmd.txt)
          echo "file=$PATHV" >> $GITHUB_OUTPUT
          printf '%s' "$SEARCH" > /tmp/search.txt
          printf '%s' "$REPLACE" > /tmp/replace.txt
      - name: Apply patch (literal)
        run: |
          FILE="${{ steps.parse.outputs.file }}"
          if [ ! -f "$FILE" ]; then
            echo "::error::File not found: $FILE"; exit 1
          fi
          SEARCH=$(cat /tmp/search.txt)
          REPLACE=$(cat /tmp/replace.txt)
          python - "$FILE" "$SEARCH" "$REPLACE" <<'PY'
import sys, pathlib
p=pathlib.Path(sys.argv[1])
old=p.read_text(encoding='utf-8')
search=sys.argv[2]
rep=sys.argv[3]
if search not in old:
  print("::error::Search text not found"); sys.exit(1)
new=old.replace(search,rep)
p.write_text(new,encoding='utf-8')
PY
      - name: Commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "patch(${ { steps.parse.outputs.file } }): issue #${{ github.event.issue.number }}" || echo "no changes"
          git push
      - name: React on comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: hooray
