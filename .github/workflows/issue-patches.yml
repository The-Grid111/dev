name: Apply issue comment patches

on:
  issue_comment:
    types: [created]

# GHA must be able to push commits
permissions:
  contents: write
  issues: read

jobs:
  apply:
    # Only on issues (not PRs) and only when the comment has a ```patch fence
    if: >
      github.event.issue.pull_request == null &&
      contains(github.event.comment.body, '```patch')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract code block
        id: extract
        env:
          BODY: ${{ github.event.comment.body }}
        run: |
          python - <<'PY'
          import os, re, sys, pathlib
          body = os.environ['BODY']

          # Grab first ```patch ... ``` block
          m = re.search(r"```patch\s*(.*?)```", body, re.S|re.I)
          if not m:
            print("No ```patch block found"); sys.exit(1)
          payload = m.group(1).strip()

          # Mode A: single-file replace
          #   First line like: "# file: dev/styles.css"
          fm = re.match(r"^\s*#\s*file:\s*(.+?)\s*$", payload.splitlines()[0])
          if fm:
            path = fm.group(1).strip()
            content = "\n".join(payload.splitlines()[1:]).lstrip("\n")
            pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
            with open(path, "w", newline="\n") as f:
              f.write(content)
            open("MODE.txt", "w").write("file")
            open("TARGET.txt", "w").write(path)
            sys.exit(0)

          # Mode B: unified diff (git apply)
          with open("changes.patch","w", newline="\n") as f:
            f.write(payload + ("\n" if not payload.endswith("\n") else ""))
          open("MODE.txt","w").write("diff")
          PY

      - name: Commit (file mode)
        if: success() && steps.extract.outputs == '' && hashFiles('MODE.txt') != '' && ${{ hashFiles('MODE.txt') != '' }}
        run: |
          if [ "$(cat MODE.txt)" != "file" ]; then
            echo "Not file mode, skipping"; exit 0
          fi
          set -e
          git config user.name  "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"; exit 0
          fi
          msg="Replace $(cat TARGET.txt) from issue #${{ github.event.issue.number }} by @${{ github.event.comment.user.login }}"
          git commit -m "$msg"
          git push

      - name: Apply patch (diff mode)
        if: success() && hashFiles('MODE.txt') != '' && ${{ hashFiles('MODE.txt') != '' }}
        run: |
          if [ "$(cat MODE.txt)" != "diff" ]; then
            echo "Not diff mode, skipping"; exit 0
          fi
          set -e
          git config user.name  "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git apply --whitespace=fix changes.patch
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"; exit 0
          fi
          msg="Apply patch from issue #${{ github.event.issue.number }} by @${{ github.event.comment.user.login }}"
          git commit -m "$msg"
          git push
