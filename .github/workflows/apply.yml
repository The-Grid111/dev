name: Apply file from issue comment

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  issues: write

jobs:
  apply:
    # Only run when the comment starts with /apply (nice guardrail)
    if: startsWith(github.event.comment.body, '/apply ')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          # Work directly on the default branch (usually main)
          ref: ${{ github.ref }}

      - name: Parse comment and write file
        id: parse
        run: |
          set -euo pipefail

          BODY="$(jq -r '.comment.body' "$GITHUB_EVENT_PATH")"

          # First line must be: /apply path=relative/path.ext
          FIRST_LINE="$(printf "%s\n" "$BODY" | sed -n '1p')"
          FILEPATH="$(echo "$FIRST_LINE" | sed -n 's|^/apply[[:space:]]\+path=\(.*\)$|\1|p')"
          if [ -z "$FILEPATH" ]; then
            echo "Comment must start with: /apply path=relative/path.ext" >&2
            exit 1
          fi

          # Extract content between markers:
          #   <<<FILE
          #   ...your file content...
          #   FILE
          CONTENT="$(printf "%s\n" "$BODY" | awk '/^<<<FILE$/{flag=1;next}/^FILE$/{flag=0}flag')"
          if [ -z "$CONTENT" ]; then
            echo "No content found between <<<FILE and FILE markers." >&2
            exit 1
          fi

          # Allow-list – keep this safe. Add paths you want to permit.
          case "$FILEPATH" in
            assets/*|data/*|index.html|privacy.html|terms.html|.github/workflows/deploy.yml|.github/workflows/apply.yml)
              ;;
            *)
              echo "Path not allowed: $FILEPATH" >&2
              exit 1
              ;;
          esac

          mkdir -p "$(dirname "$FILEPATH")"
          printf "%s" "$CONTENT" > "$FILEPATH"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$FILEPATH"

          if git diff --cached --quiet; then
            echo "NOCHANGE=true" >> "$GITHUB_ENV"
          else
            git commit -m "apply: update $FILEPATH via issue comment"
            git push
            echo "NOCHANGE=false" >> "$GITHUB_ENV"
          fi

      - name: Reply to the issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const nochange = process.env.NOCHANGE === 'true';
            const body = nochange
              ? '✅ Received /apply but file was identical. No changes pushed.'
              : '✅ Applied change and pushed. Pages will redeploy.';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });
