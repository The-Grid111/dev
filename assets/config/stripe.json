<script>
/**
 * THE GRID — Stripe + Plan Details wiring (no CSS edits required)
 * - "Choose" buttons go to Stripe
 * - "Details" buttons open a themed panel with features
 * - Optional top banner for Diamond Trial (auto-hides if no link)
 *
 * Works off button text if data-role isn't present, so you don't need to touch HTML.
 * You CAN add data-role="choose" or data-role="details" later for clarity.
 */

(function () {
  const CONFIG_URL = '/dev/assets/config/stripe.json';
  const DISMISS_KEY = 'gc_trial_dismissed';

  // Plan copy shown in the Details panel
  const PLAN_COPY = {
    basic: {
      title: 'BASIC £9/mo',
      bullets: [
        'Starter templates & effects',
        'Theme presets & Save imports',
        'Sample Library (watermarked)',
        'Email support (48h)',
        'Cancel/upgrade anytime',
      ],
    },
    silver: {
      title: 'SILVER £29/mo',
      bullets: [
        'Everything in Basic',
        'Advanced effects & metallic presets',
        'Pro “Stacks & Setups” guides',
        'Priority email (24h)',
        'Quarterly tune-ups',
      ],
    },
    gold: {
      title: 'GOLD £49/mo',
      bullets: [
        'Everything in Silver',
        'Admin toolkit & automations',
        'Pro Library & recipes',
        'Priority hotfix',
      ],
    },
    diamond: {
      title: 'DIAMOND £99/mo',
      bullets: [
        'Everything in Gold',
        'Private Library drops & early packs',
        'Custom pipelines (Notion/Airtable/Zapier)',
        'Roadmap priority & fast turnaround',
        'Watermark-free exports + commercial rights',
      ],
    },
    trial: {
      title: 'Diamond Trial (Launch Offer)',
      bullets: [
        'Temporary access to all Diamond features',
        'Private drops during the trial window',
        'Watermark-free exports allowed during trial',
        'Limit 1 per customer',
      ],
    },
  };

  // Minimal panel styles injected once (keeps theme, uses subtle backdrop)
  const PANEL_CSS = `
  .gc-panel-backdrop{position:fixed;inset:0;background:rgba(0,0,0,.5);backdrop-filter:saturate(120%) blur(2px);z-index:9998;opacity:0;transition:opacity .15s ease}
  .gc-panel{position:fixed;inset:auto 0 0 0;background:#0f1115;color:#e8e8ea;border-top:1px solid rgba(255,255,255,.08);box-shadow:0 -20px 60px rgba(0,0,0,.4);z-index:9999;transform:translateY(100%);transition:transform .2s ease}
  .gc-panel.open{transform:translateY(0)}
  .gc-panel-backdrop.open{opacity:1}
  .gc-panel .gc-wrap{max-width:900px;margin:0 auto;padding:24px 18px}
  .gc-panel h3{margin:0 0 8px 0;font-size:1.1rem;letter-spacing:.02em}
  .gc-panel p.gc-sub{margin:0 0 14px 0;opacity:.8}
  .gc-panel ul{margin:0;padding-left:18px;display:grid;gap:8px}
  .gc-panel .gc-row{display:flex;gap:12px;align-items:center;margin-top:18px}
  .gc-panel .gc-btn{display:inline-flex;align-items:center;gap:8px;border-radius:12px;padding:10px 14px;font-weight:600;border:1px solid rgba(255,255,255,.12);background:linear-gradient(180deg,rgba(255,215,128,.18),rgba(255,215,128,.08));color:#fff;cursor:pointer}
  .gc-panel .gc-btn.secondary{background:transparent}
  .gc-banner{position:sticky;top:0;z-index:9990;background:linear-gradient(90deg,rgba(255,215,128,.18),rgba(255,215,128,.08));border-bottom:1px solid rgba(255,255,255,.08)}
  .gc-banner .gc-inner{max-width:1100px;margin:0 auto;padding:10px 14px;display:flex;gap:10px;align-items:center;justify-content:space-between}
  .gc-banner .gc-cta{display:inline-flex;align-items:center;gap:8px;border-radius:999px;padding:8px 12px;font-weight:700;border:1px solid rgba(255,255,255,.14);background:rgba(0,0,0,.25);color:#fff;cursor:pointer}
  .gc-banner .gc-x{background:none;border:none;color:#fff;opacity:.7;cursor:pointer}
  @media(min-width:880px){.gc-panel .gc-wrap{padding:28px}}
  `;

  function injectCSSOnce() {
    if (document.getElementById('gc-panel-css')) return;
    const s = document.createElement('style');
    s.id = 'gc-panel-css';
    s.textContent = PANEL_CSS;
    document.head.appendChild(s);
  }

  function el(tag, attrs={}, children=[]) {
    const e = document.createElement(tag);
    Object.entries(attrs).forEach(([k,v])=>{
      if (k==='class') e.className = v;
      else if (k==='html') e.innerHTML = v;
      else e.setAttribute(k, v);
    });
    children.forEach(c => e.appendChild(typeof c==='string' ? document.createTextNode(c) : c));
    return e;
  }

  function showDetails(plan, linkMap) {
    injectCSSOnce();
    const copy = PLAN_COPY[plan] || {title: plan, bullets: []};

    // Backdrop + panel
    const backdrop = el('div',{class:'gc-panel-backdrop'});
    const panel = el('div',{class:'gc-panel'});
    const wrap = el('div',{class:'gc-wrap'});
    const title = el('h3',{},[copy.title]);
    const sub = el('p',{class:'gc-sub'},['What you get in this plan:']);
    const ul = el('ul',{}, copy.bullets.map(b => el('li',{},[b])));

    const row = el('div',{class:'gc-row'});
    const chooseBtn = el('button',{class:'gc-btn'},['Choose ', '→']);
    const closeBtn = el('button',{class:'gc-btn secondary'},['Close']);

    chooseBtn.addEventListener('click', () => {
      const url = linkMap[plan];
      if (url) window.open(url, '_blank', 'noopener');
    });
    function close() {
      panel.classList.remove('open');
      backdrop.classList.remove('open');
      setTimeout(()=>{backdrop.remove();panel.remove();},150);
    }
    closeBtn.addEventListener('click', close);
    backdrop.addEventListener('click', close);

    row.appendChild(chooseBtn);
    row.appendChild(closeBtn);
    wrap.appendChild(title);
    wrap.appendChild(sub);
    wrap.appendChild(ul);
    wrap.appendChild(row);
    panel.appendChild(wrap);
    document.body.appendChild(backdrop);
    document.body.appendChild(panel);
    requestAnimationFrame(()=>{
      backdrop.classList.add('open');
      panel.classList.add('open');
    });
  }

  function injectTrialBanner(trialUrl) {
    if (!trialUrl) return;
    if (localStorage.getItem(DISMISS_KEY)==='1') return;

    injectCSSOnce();
    const banner = el('div',{class:'gc-banner'});
    const inner = el('div',{class:'gc-inner'});
    const left = el('div',{},[document.createTextNode('Launch Offer: Diamond Trial — temporary access to private packs & watermark-free exports.')]);
    const ctas = el('div',{});
    const btn = el('button',{class:'gc-cta'},['Try now (£5)']);
    const x = el('button',{class:'gc-x','aria-label':'Dismiss'},['✕']);

    btn.addEventListener('click', ()=> window.open(trialUrl,'_blank','noopener'));
    x.addEventListener('click', ()=>{
      localStorage.setItem(DISMISS_KEY,'1');
      banner.remove();
    });

    ctas.appendChild(btn); ctas.appendChild(x);
    inner.appendChild(left); inner.appendChild(ctas);
    banner.appendChild(inner);

    const header = document.querySelector('header') || document.body.firstElementChild;
    (header?.parentNode || document.body).insertBefore(banner, header || document.body.firstChild);
  }

  function isDetailsButton(node) {
    const role = (node.getAttribute('data-role')||'').toLowerCase();
    if (role === 'details') return true;
    if (role === 'choose') return false;
    // Fallback: decide from visible text
    const t = (node.textContent||'').trim().toLowerCase();
    return t.includes('details') || t.includes('learn');
  }

  async function boot() {
    try {
      const res = await fetch(CONFIG_URL, {cache:'no-store'});
      if (!res.ok) throw new Error('config fetch failed');
      const cfg = await res.json();

      const linkMap = {
        basic: cfg.basic || '',
        silver: cfg.silver || '',
        gold: cfg.gold || '',
        diamond: cfg.diamond || '',
        trial: cfg.trial || ''
      };

      // Wire buttons by data-plan, but keep Details strictly as panels
      document.querySelectorAll('[data-plan]').forEach(btn => {
        const plan = (btn.getAttribute('data-plan')||'').toLowerCase();
        if (!plan) return;

        if (isDetailsButton(btn)) {
          btn.addEventListener('click', (e)=> {
            e.preventDefault();
            showDetails(plan, linkMap);
          });
        } else {
          btn.addEventListener('click', (e)=> {
            e.preventDefault();
            const url = linkMap[plan];
            if (url) window.open(url, '_blank', 'noopener');
          });
        }
      });

      // Trial banner if configured
      injectTrialBanner(linkMap.trial);

    } catch (err) {
      console.warn('[GRID] Stripe/config wiring error:', err);
    }
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', boot);
  } else {
    boot();
  }
})();
</script>
