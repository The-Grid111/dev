{
  "ops": [
    {
      "op": "write",
      "path": "scripts/gen-file-inventory.mjs",
      "content": "// scripts/gen-file-inventory.mjs\n// Guaranteed to always output required files\n\nimport { execFile } from 'node:child_process';\nimport { promisify } from 'node:util';\nimport { promises as fs } from 'node:fs';\nimport path from 'node:path';\n\nconst execFileAsync = promisify(execFile);\n\nconst OUT_JSON    = process.env.INVENTORY_OUT_JSON    || 'dev/data/file-tree.json';\nconst OUT_TXT     = process.env.INVENTORY_OUT_TXT     || 'dev/data/file-tree.txt';\nconst OUT_METRICS = process.env.INVENTORY_METRICS     || 'dev/data/repo-metrics.json';\nconst IGNORE_RAW  = process.env.INVENTORY_IGNORE      || 'archive/**,dev/**/archive/**,.git/**,node_modules/**,.github/**';\nconst IGNORE = IGNORE_RAW.split(',').map(s => s.trim()).filter(Boolean);\n\nfunction toKB(bytes){ return Math.round(bytes / 1024); }\n\nasync function gitTrackedFilesWithExcludes(){\n  try {\n    const excludeArgs = [];\n    for (const patt of IGNORE) excludeArgs.push(`:(exclude)${patt}`);\n    const args = ['ls-files', '-z', '--', ...excludeArgs];\n    const { stdout } = await execFileAsync('git', args, { maxBuffer: 1024 * 1024 * 64 });\n    return stdout.split('\\u0000').filter(Boolean);\n  } catch {\n    return [];\n  }\n}\n\nasync function statSafe(p){ try { return await fs.stat(p); } catch { return null; } }\nasync function ensureDirFor(filePath){ await fs.mkdir(path.dirname(filePath), { recursive: true }); }\n\nasync function main(){\n  const started = Date.now();\n  const files = await gitTrackedFilesWithExcludes();\n\n  let totalBytes = 0;\n  const items = [];\n  for (const f of files){\n    const st = await statSafe(f);\n    if (!st || !st.isFile()) continue;\n    totalBytes += st.size;\n    items.push({ path: f, size: st.size, size_kb: toKB(st.size) });\n  }\n\n  items.sort((a,b)=> a.path.localeCompare(b.path));\n  const txt = items.map(i=> i.path).join('\\n') + (items.length ? '\\n' : '');\n\n  const metrics = {\n    generated_at: new Date().toISOString(),\n    duration_ms: Date.now() - started,\n    files_tracked: items.length,\n    total_bytes: totalBytes,\n    total_kb: toKB(totalBytes)\n  };\n\n  await ensureDirFor(OUT_JSON);\n  await ensureDirFor(OUT_TXT);\n  await ensureDirFor(OUT_METRICS);\n\n  // Always write valid files, even if empty\n  await fs.writeFile(OUT_JSON, JSON.stringify(items, null, 2) + '\\n');\n  await fs.writeFile(OUT_TXT, txt);\n  await fs.writeFile(OUT_METRICS, JSON.stringify(metrics, null, 2) + '\\n');\n\n  console.log(`[inventory] wrote ${items.length} entries`);\n}\n\nmain().catch(err => {\n  console.error('[inventory] failed:', err);\n  process.exitCode = 1;\n});\n"
    }
  ]
}
